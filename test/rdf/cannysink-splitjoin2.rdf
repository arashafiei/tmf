rdf canny-splitjoin2 {
    topology {
        nodes = A,S,B,C,J,D;
	edges = e1(A,S), e2(S,B), e3(B,C), e4(C,J), e5(J,D);
    }
    actor A {
    	computation = VideoCaptureMR;
	file_name = pedestrian.mp4;
    }
    actor S {
	computation = MatSplit;
	level = 1;
    }
    actor B {
    	computation = CvtColor;
    }
    actor C {
    	computation = Canny;
    }
    actor J {
	computation = MatJoin;
	level = 1;
    }
    actor D {
    	computation = ImageSinkMR;
    }
    parameter {
	logging = true;
    }
}
rule r1 {
left {
    topology {
        nodes = A,S,x,y,J,D;
	edges = e1(A,S), e2(S,x), e3(x,y), e4(y,J), e5(J,D);
    }
    actor A {
    	computation = VideoCaptureMR;
	file_name = pedestrian.mp4;
    }
    actor S {
    	computation = MatSplit;
	level = 1;
    }
    actor x {
    	computation = CvtColor;
    }
    actor y {
    	computation = Canny;
    }
    actor J {
    	computation = MatJoin;
	level = 1;
    }
    actor D {
    	computation = ImageSinkMR;
    }
}
right {
    topology {
        nodes = A,S,x,x1,y,y1,J,D;
	edges = e1(A,S), e2(S,x), e3(S,x1), e4(x,y), 
		e5(x1,y1), e6(y,J), e7(y1,J), e8(J,D);
    }
    production {
	e8 = 2;
    }
    consumption {
	e1 = 2;
    }
    actor A {
    	computation = VideoCaptureMR;
	file_name = pedestrian.mp4;
    }
    actor S {
    	computation = MatSplit;
	level = 2;
    }
    actor x {
    	computation = CvtColor;
    }
    actor x1 {
    	computation = CvtColor;
    }
    actor y {
    	computation = Canny;
    }
    actor y1 {
    	computation = Canny;
    }
    actor J {
    	computation = MatJoin;
	level = 2;
    }
    actor D {
    	computation = ImageSinkMR;
    }
}
}
main {
    load=4 : r1;
}
